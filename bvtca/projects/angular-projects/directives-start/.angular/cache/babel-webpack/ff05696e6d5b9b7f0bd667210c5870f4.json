{"ast":null,"code":"import _classCallCheck from \"/Volumes/Grimoire/bay-valley-tech-code/bvtca/projects/angular-projects/directives-start/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Volumes/Grimoire/bay-valley-tech-code/bvtca/projects/angular-projects/directives-start/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport { __decorate } from \"tslib\";\nimport { Directive, Input, TemplateRef, ViewContainerRef } from '@angular/core'; //opposite of inIf, cause only completes action when false\n\nvar UnlessDirective = /*#__PURE__*/function () {\n  //            TemplateRef like ElementRef, but for in the template and the second is for where,\n  function UnlessDirective(templateRef, vcRef) {\n    _classCallCheck(this, UnlessDirective);\n\n    this.templateRef = templateRef;\n    this.vcRef = vcRef;\n  }\n\n  _createClass(UnlessDirective, [{\n    key: \"unless\",\n    set: function set(condition) {\n      if (!condition) {\n        this.vcRef.createEmbeddedView(this.templateRef);\n      } else {\n        this.vcRef.clear();\n      }\n    }\n  }]);\n\n  return UnlessDirective;\n}();\n\nUnlessDirective.ctorParameters = function () {\n  return [{\n    type: TemplateRef\n  }, {\n    type: ViewContainerRef\n  }];\n};\n\nUnlessDirective.propDecorators = {\n  unless: [{\n    type: Input\n  }]\n};\nUnlessDirective = __decorate([Directive({\n  selector: '[appUnless]'\n})], UnlessDirective);\nexport { UnlessDirective };","map":{"version":3,"sources":["/Volumes/Grimoire/bay-valley-tech-code/bvtca/projects/angular-projects/directives-start/src/app/unless.directive.ts"],"names":["__decorate","Directive","Input","TemplateRef","ViewContainerRef","UnlessDirective","templateRef","vcRef","condition","createEmbeddedView","clear","ctorParameters","type","propDecorators","unless","selector"],"mappings":";;AAAA,SAASA,UAAT,QAA2B,OAA3B;AACA,SAASC,SAAT,EAAoBC,KAApB,EAA2BC,WAA3B,EAAwCC,gBAAxC,QAAgE,eAAhE,C,CACA;;AACA,IAAIC,eAAe;AACf;AACA,2BAAYC,WAAZ,EAAyBC,KAAzB,EAAgC;AAAA;;AAC5B,SAAKD,WAAL,GAAmBA,WAAnB;AACA,SAAKC,KAAL,GAAaA,KAAb;AACH;;AALc;AAAA;AAAA,SAMf,aAAWC,SAAX,EAAsB;AAClB,UAAI,CAACA,SAAL,EAAgB;AACZ,aAAKD,KAAL,CAAWE,kBAAX,CAA8B,KAAKH,WAAnC;AACH,OAFD,MAGK;AACD,aAAKC,KAAL,CAAWG,KAAX;AACH;AACJ;AAbc;;AAAA;AAAA,GAAnB;;AAeAL,eAAe,CAACM,cAAhB,GAAiC;AAAA,SAAM,CACnC;AAAEC,IAAAA,IAAI,EAAET;AAAR,GADmC,EAEnC;AAAES,IAAAA,IAAI,EAAER;AAAR,GAFmC,CAAN;AAAA,CAAjC;;AAIAC,eAAe,CAACQ,cAAhB,GAAiC;AAC7BC,EAAAA,MAAM,EAAE,CAAC;AAAEF,IAAAA,IAAI,EAAEV;AAAR,GAAD;AADqB,CAAjC;AAGAG,eAAe,GAAGL,UAAU,CAAC,CACzBC,SAAS,CAAC;AACNc,EAAAA,QAAQ,EAAE;AADJ,CAAD,CADgB,CAAD,EAIzBV,eAJyB,CAA5B;AAKA,SAASA,eAAT","sourcesContent":["import { __decorate } from \"tslib\";\nimport { Directive, Input, TemplateRef, ViewContainerRef } from '@angular/core';\n//opposite of inIf, cause only completes action when false\nlet UnlessDirective = class UnlessDirective {\n    //            TemplateRef like ElementRef, but for in the template and the second is for where,\n    constructor(templateRef, vcRef) {\n        this.templateRef = templateRef;\n        this.vcRef = vcRef;\n    }\n    set unless(condition) {\n        if (!condition) {\n            this.vcRef.createEmbeddedView(this.templateRef);\n        }\n        else {\n            this.vcRef.clear();\n        }\n    }\n};\nUnlessDirective.ctorParameters = () => [\n    { type: TemplateRef },\n    { type: ViewContainerRef }\n];\nUnlessDirective.propDecorators = {\n    unless: [{ type: Input }]\n};\nUnlessDirective = __decorate([\n    Directive({\n        selector: '[appUnless]'\n    })\n], UnlessDirective);\nexport { UnlessDirective };\n"]},"metadata":{},"sourceType":"module"}