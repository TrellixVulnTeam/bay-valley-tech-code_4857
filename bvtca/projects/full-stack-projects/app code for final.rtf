{\rtf1\ansi\ansicpg1252\cocoartf2636
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fnil\fcharset0 Menlo-Regular;}
{\colortbl;\red255\green255\blue255;\red70\green137\blue204;\red23\green23\blue23;\red202\green202\blue202;
\red212\green214\blue154;\red194\green126\blue101;\red66\green179\blue255;\red167\green197\blue152;\red67\green192\blue160;
\red140\green211\blue254;\red183\green111\blue179;\red89\green138\blue67;}
{\*\expandedcolortbl;;\cssrgb\c33725\c61176\c83922;\cssrgb\c11765\c11765\c11765;\cssrgb\c83137\c83137\c83137;
\cssrgb\c86275\c86275\c66667;\cssrgb\c80784\c56863\c47059;\cssrgb\c30980\c75686\c100000;\cssrgb\c70980\c80784\c65882;\cssrgb\c30588\c78824\c69020;
\cssrgb\c61176\c86275\c99608;\cssrgb\c77255\c52549\c75294;\cssrgb\c41569\c60000\c33333;}
\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\partightenfactor0

\f0\fs24 \cf2 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 const\cf4 \strokec4  \cf5 \strokec5 express\cf4 \strokec4  = \cf5 \strokec5 require\cf4 \strokec4 (\cf6 \strokec6 'express'\cf4 \strokec4 );\cb1 \
\cf2 \cb3 \strokec2 const\cf4 \strokec4  \cf7 \strokec7 jsonwebtoken\cf4 \strokec4  = \cf5 \strokec5 require\cf4 \strokec4 (\cf6 \strokec6 'jsonwebtoken'\cf4 \strokec4 );\cb1 \
\cf2 \cb3 \strokec2 const\cf4 \strokec4  \cf7 \strokec7 mysql\cf4 \strokec4  = \cf5 \strokec5 require\cf4 \strokec4 (\cf6 \strokec6 'mysql2/promise'\cf4 \strokec4 );\cb1 \
\cf2 \cb3 \strokec2 const\cf4 \strokec4  \cf7 \strokec7 app\cf4 \strokec4  = \cf5 \strokec5 express\cf4 \strokec4 ();\cb1 \
\cf2 \cb3 \strokec2 const\cf4 \strokec4  \cf7 \strokec7 port\cf4 \strokec4  = \cf8 \strokec8 3000\cf4 \strokec4 ;\cb1 \
\cf2 \cb3 \strokec2 const\cf4 \strokec4  \cf9 \strokec9 crypto\cf4 \strokec4  = \cf5 \strokec5 require\cf4 \strokec4 (\cf6 \strokec6 'crypto'\cf4 \strokec4 );\cb1 \
\
\pard\pardeftab720\partightenfactor0
\cf7 \cb3 \strokec7 app\cf4 \strokec4 .\cf5 \strokec5 use\cf4 \strokec4 (\cf5 \strokec5 express\cf4 \strokec4 .\cf5 \strokec5 json\cf4 \strokec4 ());\cb1 \
\
\pard\pardeftab720\partightenfactor0
\cf2 \cb3 \strokec2 const\cf4 \strokec4  \cf7 \strokec7 JWT_KEY\cf4 \strokec4  = \cf6 \strokec6 "THIS_IS_TOP_SECRET"\cf4 \strokec4 ;\cb1 \
\
\cf2 \cb3 \strokec2 const\cf4 \strokec4  \cf5 \strokec5 authenticateJWT\cf4 \strokec4  = (\cf10 \strokec10 req\cf4 \strokec4 , \cf10 \strokec10 res\cf4 \strokec4 , \cf10 \strokec10 next\cf4 \strokec4 ) \cf2 \strokec2 =>\cf4 \strokec4  \{\cb1 \
\pard\pardeftab720\partightenfactor0
\cf4 \cb3   \cf2 \strokec2 const\cf4 \strokec4  \cf7 \strokec7 authHeader\cf4 \strokec4  = \cf10 \strokec10 req\cf4 \strokec4 .\cf10 \strokec10 headers\cf4 \strokec4 .\cf10 \strokec10 authorization\cf4 \strokec4 ;\cb1 \
\
\cb3   \cf11 \strokec11 if\cf4 \strokec4  (\cf7 \strokec7 authHeader\cf4 \strokec4 ) \{\cb1 \
\cb3     \cf2 \strokec2 const\cf4 \strokec4  \cf7 \strokec7 token\cf4 \strokec4  = \cf7 \strokec7 authHeader\cf4 \strokec4 .\cf5 \strokec5 split\cf4 \strokec4 (\cf6 \strokec6 ' '\cf4 \strokec4 )[\cf8 \strokec8 1\cf4 \strokec4 ];\cb1 \
\
\cb3     \cf10 \strokec10 jsonwebtoken\cf4 \strokec4 .\cf5 \strokec5 verify\cf4 \strokec4 (\cf7 \strokec7 token\cf4 \strokec4 , \cf7 \strokec7 JWT_KEY\cf4 \strokec4 , (\cf10 \strokec10 err\cf4 \strokec4 , \cf10 \strokec10 user\cf4 \strokec4 ) \cf2 \strokec2 =>\cf4 \strokec4  \{\cb1 \
\cb3       \cf11 \strokec11 if\cf4 \strokec4  (\cf10 \strokec10 err\cf4 \strokec4 ) \{\cb1 \
\cb3         \cf11 \strokec11 return\cf4 \strokec4  \cf10 \strokec10 res\cf4 \strokec4 .\cf5 \strokec5 sendStatus\cf4 \strokec4 (\cf8 \strokec8 403\cf4 \strokec4 );\cb1 \
\cb3       \}\cb1 \
\
\cb3       \cf10 \strokec10 req\cf4 \strokec4 .\cf10 \strokec10 user\cf4 \strokec4  = \cf10 \strokec10 user\cf4 \strokec4 ;\cb1 \
\cb3       \cf5 \strokec5 next\cf4 \strokec4 ();\cb1 \
\cb3     \});\cb1 \
\cb3   \} \cf11 \strokec11 else\cf4 \strokec4  \{\cb1 \
\cb3     \cf10 \strokec10 res\cf4 \strokec4 .\cf5 \strokec5 sendStatus\cf4 \strokec4 (\cf8 \strokec8 401\cf4 \strokec4 );\cb1 \
\cb3   \}\cb1 \
\cb3 \};\cb1 \
\
\pard\pardeftab720\partightenfactor0
\cf7 \cb3 \strokec7 app\cf4 \strokec4 .\cf5 \strokec5 use\cf4 \strokec4 (\cf2 \strokec2 async\cf4 \strokec4  (\cf10 \strokec10 req\cf4 \strokec4 , \cf10 \strokec10 res\cf4 \strokec4 , \cf5 \strokec5 next\cf4 \strokec4 ) \cf2 \strokec2 =>\cf4 \strokec4  \{   \cf12 \strokec12 //match login\cf4 \cb1 \strokec4 \
\pard\pardeftab720\partightenfactor0
\cf4 \cb3   \cf10 \strokec10 global\cf4 \strokec4 .\cf10 \strokec10 db\cf4 \strokec4  = \cf11 \strokec11 await\cf4 \strokec4  \cf10 \strokec10 mysql\cf4 \strokec4 .\cf5 \strokec5 createConnection\cf4 \strokec4 (\{ \cb1 \
\cb3     \cf10 \strokec10 host:\cf4 \strokec4  \cf6 \strokec6 'localhost'\cf4 \strokec4 , \cb1 \
\cb3     \cf10 \strokec10 user:\cf4 \strokec4  \cf6 \strokec6 'root'\cf4 \strokec4 , \cb1 \
\cb3     \cf10 \strokec10 password:\cf4 \strokec4  \cf6 \strokec6 'Anch0r07'\cf4 \strokec4 , \cb1 \
\cb3     \cf10 \strokec10 database:\cf4 \strokec4  \cf6 \strokec6 'backend_final'\cf4 \strokec4 , \cb1 \
\cb3     \cf10 \strokec10 multipleStatements:\cf4 \strokec4  \cf2 \strokec2 true\cf4 \strokec4  \cb1 \
\cb3   \});\cb1 \
\
\cb3   \cf10 \strokec10 global\cf4 \strokec4 .\cf10 \strokec10 db\cf4 \strokec4 .\cf5 \strokec5 query\cf4 \strokec4 (\cf6 \strokec6 `SET time_zone = '-8:00'`\cf4 \strokec4 );\cb1 \
\cb3   \cf11 \strokec11 await\cf4 \strokec4  \cf5 \strokec5 next\cf4 \strokec4 ();\cb1 \
\cb3 \});\cb1 \
\
\
\pard\pardeftab720\partightenfactor0
\cf7 \cb3 \strokec7 app\cf4 \strokec4 .\cf5 \strokec5 post\cf4 \strokec4 (\cf6 \strokec6 '/login'\cf4 \strokec4 , \cf2 \strokec2 async\cf4 \strokec4  (\cf10 \strokec10 req\cf4 \strokec4 , \cf10 \strokec10 res\cf4 \strokec4 ) \cf2 \strokec2 =>\cf4 \strokec4  \{\cb1 \
\pard\pardeftab720\partightenfactor0
\cf4 \cb3   \cf10 \strokec10 console\cf4 \strokec4 .\cf5 \strokec5 log\cf4 \strokec4 (\cf6 \strokec6 'login.req.body'\cf4 \strokec4 , \cf10 \strokec10 req\cf4 \strokec4 .\cf10 \strokec10 body\cf4 \strokec4 );\cb1 \
\cb3   \cf12 \strokec12 // console.log(req.body);\cf4 \cb1 \strokec4 \
\cb3   \cb1 \
\cb3   \cb1 \
\cb3   \cf2 \strokec2 const\cf4 \strokec4   \{ \cf7 \strokec7 email\cf4 \strokec4 , \cf7 \strokec7 password\cf4 \strokec4  \} = \cf10 \strokec10 req\cf4 \strokec4 .\cf10 \strokec10 body\cf4 \strokec4 ;\cb1 \
\
\cb3   \cf10 \strokec10 passwordHash\cf4 \strokec4  = \cf9 \strokec9 crypto\cf4 \strokec4 .\cf5 \strokec5 createHash\cf4 \strokec4 (\cf6 \strokec6 'sha256'\cf4 \strokec4 )\cb1 \
\cb3     .\cf5 \strokec5 update\cf4 \strokec4 (\cf10 \strokec10 req\cf4 \strokec4 .\cf10 \strokec10 body\cf4 \strokec4 .\cf10 \strokec10 password\cf4 \strokec4 )\cb1 \
\cb3     .\cf5 \strokec5 digest\cf4 \strokec4 (\cf6 \strokec6 'hex'\cf4 \strokec4 );\cb1 \
\cb3   \cf10 \strokec10 console\cf4 \strokec4 .\cf5 \strokec5 log\cf4 \strokec4 (\cf10 \strokec10 passwordHash\cf4 \strokec4 );\cb1 \
\cb3   \cb1 \
\cb3   \cf2 \strokec2 const\cf4 \strokec4  [[\cf7 \strokec7 user\cf4 \strokec4 ]] = \cf11 \strokec11 await\cf4 \strokec4  \cf10 \strokec10 global\cf4 \strokec4 .\cf10 \strokec10 db\cf4 \strokec4 .\cf5 \strokec5 query\cf4 \strokec4 (\cf6 \strokec6 'SELECT * FROM users WHERE email = ? AND password = ?'\cf4 \strokec4 , \cb1 \
\cb3   [\cf7 \strokec7 email\cf4 \strokec4 , \cf10 \strokec10 passwordHash\cf4 \strokec4 ])\cb1 \
\
\cb3   \cf11 \strokec11 if\cf4 \strokec4  (\cf7 \strokec7 user\cf4 \strokec4 ) \{\cb1 \
\cb3     \cf2 \strokec2 const\cf4 \strokec4  \cf7 \strokec7 token\cf4 \strokec4  = \cf10 \strokec10 jsonwebtoken\cf4 \strokec4 .\cf5 \strokec5 sign\cf4 \strokec4 (\{ \cf10 \strokec10 id:\cf4 \strokec4  \cf7 \strokec7 user\cf4 \strokec4 .\cf10 \strokec10 id\cf4 \strokec4 , \cf10 \strokec10 email:\cf4 \strokec4  \cf7 \strokec7 user\cf4 \strokec4 .\cf10 \strokec10 email\cf4 \strokec4  \}, \cf7 \strokec7 JWT_KEY\cf4 \strokec4 );\cb1 \
\cb3   \cb1 \
\cb3     \cf10 \strokec10 res\cf4 \strokec4 .\cf5 \strokec5 json\cf4 \strokec4 (\{\cb1 \
\cb3       \cf10 \strokec10 jwt:\cf4 \strokec4  \cf7 \strokec7 token\cf4 \cb1 \strokec4 \
\cb3     \});\cb1 \
\cb3   \} \cf11 \strokec11 else\cf4 \strokec4  \{\cb1 \
\cb3     \cf10 \strokec10 res\cf4 \strokec4 .\cf5 \strokec5 send\cf4 \strokec4 (\cf6 \strokec6 'Username or password incorrect'\cf4 \strokec4 );\cb1 \
\cb3   \}\cb1 \
\cb3 \});\cb1 \
\
\pard\pardeftab720\partightenfactor0
\cf12 \cb3 \strokec12 // app.get('/', authenticateJWT, async (req, res) => \{\cf4 \cb1 \strokec4 \
\
\cf12 \cb3 \strokec12 //   const authHeader = req.headers.authorization;\cf4 \cb1 \strokec4 \
\cf12 \cb3 \strokec12 //   const token = authHeader.split(' ')[1];\cf4 \cb1 \strokec4 \
\cf12 \cb3 \strokec12 //   //console.log(req);\cf4 \cb1 \strokec4 \
\cf12 \cb3 \strokec12 //   const[data] = await global.db.query('SELECT * FROM car Where user_id = ?', \cf4 \cb1 \strokec4 \
\cf12 \cb3 \strokec12 //   [token]);\cf4 \cb1 \strokec4 \
\
\cf12 \cb3 \strokec12 //   res.send(\{\cf4 \cb1 \strokec4 \
\cf12 \cb3 \strokec12 //     data\cf4 \cb1 \strokec4 \
\cf12 \cb3 \strokec12 //   \});\cf4 \cb1 \strokec4 \
\cf12 \cb3 \strokec12 // \});\cf4 \cb1 \strokec4 \
\
\cf12 \cb3 \strokec12 // app.get('/',  async (req, res) => \{\cf4 \cb1 \strokec4 \
\
\cf12 \cb3 \strokec12 //   const authHeader = req.headers.authorization;\cf4 \cb1 \strokec4 \
\pard\pardeftab720\partightenfactor0
\cf4 \cb3   \cb1 \
\pard\pardeftab720\partightenfactor0
\cf12 \cb3 \strokec12 //   //console.log(req);\cf4 \cb1 \strokec4 \
\cf12 \cb3 \strokec12 //   const[data] = await global.db.query( "SELECT name as product, description, brand_name as brand, category_name as category FROM products INNER JOIN product_brands ON products.brand_id = product_brands.brand_id INNER JOIN product_categories ON products.category_id = product_categories.category_id");\cf4 \cb1 \strokec4 \
\
\cf12 \cb3 \strokec12 //   res.send(\{\cf4 \cb1 \strokec4 \
\cf12 \cb3 \strokec12 //     data\cf4 \cb1 \strokec4 \
\cf12 \cb3 \strokec12 //   \});\cf4 \cb1 \strokec4 \
\cf12 \cb3 \strokec12 // \});\cf4 \cb1 \strokec4 \
\
\pard\pardeftab720\partightenfactor0
\cf7 \cb3 \strokec7 app\cf4 \strokec4 .\cf5 \strokec5 get\cf4 \strokec4 (\cf6 \strokec6 '/brands'\cf4 \strokec4 ,  \cf2 \strokec2 async\cf4 \strokec4  (\cf10 \strokec10 req\cf4 \strokec4 , \cf10 \strokec10 res\cf4 \strokec4 ) \cf2 \strokec2 =>\cf4 \strokec4  \{\cb1 \
\
\pard\pardeftab720\partightenfactor0
\cf4 \cb3   \cf12 \strokec12 //console.log(req);\cf4 \cb1 \strokec4 \
\cb3   \cf2 \strokec2 const\cf4 \strokec4 [\cf7 \strokec7 data\cf4 \strokec4 ] = \cf11 \strokec11 await\cf4 \strokec4  \cf10 \strokec10 global\cf4 \strokec4 .\cf10 \strokec10 db\cf4 \strokec4 .\cf5 \strokec5 query\cf4 \strokec4 (\cf6 \strokec6 "SELECT * from product_brands"\cf4 \strokec4 );\cb1 \
\
\cb3   \cf10 \strokec10 res\cf4 \strokec4 .\cf5 \strokec5 send\cf4 \strokec4 (\{\cb1 \
\cb3     \cf10 \strokec10 data\cf4 \cb1 \strokec4 \
\cb3   \});\cb1 \
\cb3 \});\cb1 \
\
\pard\pardeftab720\partightenfactor0
\cf7 \cb3 \strokec7 app\cf4 \strokec4 .\cf5 \strokec5 get\cf4 \strokec4 (\cf6 \strokec6 '/categories'\cf4 \strokec4 ,  \cf2 \strokec2 async\cf4 \strokec4  (\cf10 \strokec10 req\cf4 \strokec4 , \cf10 \strokec10 res\cf4 \strokec4 ) \cf2 \strokec2 =>\cf4 \strokec4  \{\cb1 \
\pard\pardeftab720\partightenfactor0
\cf4 \cb3   \cb1 \
\cb3   \cf12 \strokec12 //console.log(req);\cf4 \cb1 \strokec4 \
\cb3   \cf2 \strokec2 const\cf4 \strokec4 [\cf7 \strokec7 data\cf4 \strokec4 ] = \cf11 \strokec11 await\cf4 \strokec4  \cf10 \strokec10 global\cf4 \strokec4 .\cf10 \strokec10 db\cf4 \strokec4 .\cf5 \strokec5 query\cf4 \strokec4 (\cf6 \strokec6 "SELECT * from product_categories"\cf4 \strokec4 );\cb1 \
\
\cb3   \cb1 \
\
\cb3   \cf10 \strokec10 res\cf4 \strokec4 .\cf5 \strokec5 send\cf4 \strokec4 (\{\cb1 \
\cb3     \cf10 \strokec10 data\cf4 \cb1 \strokec4 \
\cb3   \});\cb1 \
\cb3 \});\cb1 \
\
\
\pard\pardeftab720\partightenfactor0
\cf7 \cb3 \strokec7 app\cf4 \strokec4 .\cf5 \strokec5 get\cf4 \strokec4 (\cf6 \strokec6 '/:id'\cf4 \strokec4 , \cf2 \strokec2 async\cf4 \strokec4  (\cf10 \strokec10 req\cf4 \strokec4 , \cf10 \strokec10 res\cf4 \strokec4 ) \cf2 \strokec2 =>\cf4 \strokec4  \{\cb1 \
\pard\pardeftab720\partightenfactor0
\cf4 \cb3   \cf2 \strokec2 const\cf4 \strokec4  [\cf7 \strokec7 data\cf4 \strokec4 ] = \cf11 \strokec11 await\cf4 \strokec4  \cf10 \strokec10 global\cf4 \strokec4 .\cf10 \strokec10 db\cf4 \strokec4 .\cf5 \strokec5 query\cf4 \strokec4 (\cf6 \strokec6 `SELECT * FROM products WHERE id = ?`\cf4 \strokec4 , [\cf10 \strokec10 req\cf4 \strokec4 .\cf10 \strokec10 params\cf4 \strokec4 .\cf10 \strokec10 id\cf4 \strokec4 ]);\cb1 \
\
\cb3   \cf10 \strokec10 res\cf4 \strokec4 .\cf5 \strokec5 send\cf4 \strokec4 (\{\cb1 \
\cb3     \cf10 \strokec10 data\cf4 \cb1 \strokec4 \
\cb3   \});\cb1 \
\cb3 \});\cb1 \
\
\pard\pardeftab720\partightenfactor0
\cf7 \cb3 \strokec7 app\cf4 \strokec4 .\cf5 \strokec5 post\cf4 \strokec4 (\cf6 \strokec6 '/new_fav'\cf4 \strokec4 , \cf5 \strokec5 authenticateJWT\cf4 \strokec4 ,  \cf2 \strokec2 async\cf4 \strokec4  (\cf10 \strokec10 req\cf4 \strokec4 , \cf10 \strokec10 res\cf4 \strokec4 ) \cf2 \strokec2 =>\cf4 \strokec4  \{\cb1 \
\pard\pardeftab720\partightenfactor0
\cf4 \cb3   \cb1 \
\cb3   \cf2 \strokec2 const\cf4 \strokec4   \{ \cf7 \strokec7 notes\cf4 \strokec4  \} = \cf10 \strokec10 req\cf4 \strokec4 .\cf10 \strokec10 body\cf4 \strokec4 ;\cb1 \
\cb3   \cf10 \strokec10 console\cf4 \strokec4 .\cf5 \strokec5 log\cf4 \strokec4 (\cf6 \strokec6 "req.body = "\cf4 \strokec4  + \cf10 \strokec10 req\cf4 \strokec4 .\cf10 \strokec10 body\cf4 \strokec4 );\cb1 \
\cb3   \cb1 \
\cb3   \cf2 \strokec2 const\cf4 \strokec4  \cf7 \strokec7 authHeader\cf4 \strokec4  = \cf10 \strokec10 req\cf4 \strokec4 .\cf10 \strokec10 headers\cf4 \strokec4 .\cf10 \strokec10 authorization\cf4 \strokec4 ;\cb1 \
\cb3   \cf2 \strokec2 const\cf4 \strokec4  \cf7 \strokec7 token\cf4 \strokec4  = \cf7 \strokec7 authHeader\cf4 \strokec4 .\cf5 \strokec5 split\cf4 \strokec4 (\cf6 \strokec6 ' '\cf4 \strokec4 )[\cf8 \strokec8 1\cf4 \strokec4 ];\cb1 \
\
\cb3   \cf11 \strokec11 await\cf4 \strokec4  \cf10 \strokec10 global\cf4 \strokec4 .\cf10 \strokec10 db\cf4 \strokec4 .\cf5 \strokec5 query\cf4 \strokec4 (\cf6 \strokec6 `INSERT INTO favorite_products ( notes, jwt) VALUES (?, ?)`\cf4 \strokec4 , [\cb1 \
\
\cb3     \cf10 \strokec10 req\cf4 \strokec4 .\cf10 \strokec10 body\cf4 \strokec4 .\cf10 \strokec10 notes\cf4 \strokec4 ,\cb1 \
\cb3     \cf7 \strokec7 token\cf4 \cb1 \strokec4 \
\cb3   \cb1 \
\cb3     \cb1 \
\cb3   ]);\cb1 \
\
\cb3   \cf10 \strokec10 res\cf4 \strokec4 .\cf5 \strokec5 send\cf4 \strokec4 (\cf6 \strokec6 'I am posting data!'\cf4 \strokec4 )\cb1 \
\cb3 \});\cb1 \
\
\
\pard\pardeftab720\partightenfactor0
\cf7 \cb3 \strokec7 app\cf4 \strokec4 .\cf5 \strokec5 post\cf4 \strokec4 (\cf6 \strokec6 '/new_user'\cf4 \strokec4 ,  \cf2 \strokec2 async\cf4 \strokec4  (\cf10 \strokec10 req\cf4 \strokec4 , \cf10 \strokec10 res\cf4 \strokec4 ) \cf2 \strokec2 =>\cf4 \strokec4  \{\cb1 \
\pard\pardeftab720\partightenfactor0
\cf4 \cb3   \cb1 \
\cb3   \cf2 \strokec2 const\cf4 \strokec4   \{ \cf7 \strokec7 name\cf4 \strokec4 , \cf7 \strokec7 email\cf4 \strokec4 , \cf7 \strokec7 password\cf4 \strokec4  \} = \cf10 \strokec10 req\cf4 \strokec4 .\cf10 \strokec10 body\cf4 \strokec4 ;\cb1 \
\cb3   \cf10 \strokec10 console\cf4 \strokec4 .\cf5 \strokec5 log\cf4 \strokec4 (\cf10 \strokec10 req\cf4 \strokec4 .\cf10 \strokec10 body\cf4 \strokec4 )\cb1 \
\cb3   \cf12 \strokec12 //console.log(make, color);\cf4 \cb1 \strokec4 \
\
\cb3   \cf10 \strokec10 passwordHash\cf4 \strokec4  = \cf9 \strokec9 crypto\cf4 \strokec4 .\cf5 \strokec5 createHash\cf4 \strokec4 (\cf6 \strokec6 'sha256'\cf4 \strokec4 )\cb1 \
\cb3     .\cf5 \strokec5 update\cf4 \strokec4 (\cf7 \strokec7 password\cf4 \strokec4 )\cb1 \
\cb3     .\cf5 \strokec5 digest\cf4 \strokec4 (\cf6 \strokec6 'hex'\cf4 \strokec4 );\cb1 \
\cb3   \cf10 \strokec10 console\cf4 \strokec4 .\cf5 \strokec5 log\cf4 \strokec4 (\cf10 \strokec10 passwordHash\cf4 \strokec4 );\cb1 \
\
\cb3   \cf11 \strokec11 await\cf4 \strokec4  \cf10 \strokec10 global\cf4 \strokec4 .\cf10 \strokec10 db\cf4 \strokec4 .\cf5 \strokec5 query\cf4 \strokec4 (\cf6 \strokec6 `INSERT INTO users (name, email, password) VALUES (?, ?, ?)`\cf4 \strokec4 , [\cb1 \
\cb3     \cf10 \strokec10 req\cf4 \strokec4 .\cf10 \strokec10 body\cf4 \strokec4 .\cf10 \strokec10 name\cf4 \strokec4 ,\cb1 \
\cb3     \cf10 \strokec10 req\cf4 \strokec4 .\cf10 \strokec10 body\cf4 \strokec4 .\cf10 \strokec10 email\cf4 \strokec4 , \cb1 \
\cb3     \cf10 \strokec10 passwordHash\cf4 \cb1 \strokec4 \
\cb3   ]);\cb1 \
\
\cb3   \cf10 \strokec10 res\cf4 \strokec4 .\cf5 \strokec5 send\cf4 \strokec4 (\cf6 \strokec6 'I am posting data!'\cf4 \strokec4 )\cb1 \
\cb3 \});\cb1 \
\
\
\
\pard\pardeftab720\partightenfactor0
\cf7 \cb3 \strokec7 app\cf4 \strokec4 .\cf5 \strokec5 listen\cf4 \strokec4 (\cf7 \strokec7 port\cf4 \strokec4 , () \cf2 \strokec2 =>\cf4 \strokec4  \{\cb1 \
\pard\pardeftab720\partightenfactor0
\cf4 \cb3   \cf10 \strokec10 console\cf4 \strokec4 .\cf5 \strokec5 log\cf4 \strokec4 (\cf6 \strokec6 `App listening at http://localhost:\cf2 \strokec2 $\{\cf7 \strokec7 port\cf2 \strokec2 \}\cf6 \strokec6 `\cf4 \strokec4 )\cb1 \
\cb3 \});\cb1 \
\
\
}